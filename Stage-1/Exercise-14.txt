Link : https://www.w3resource.com/javascript-exercises/javascript-object-exercises.php

// Q - 1: Write a JavaScript program to list the properties of a JavaScript object.

<html>
<head>
	<meta charset="utf-8">
<script>
var string = "";
var student = {
name : "David Rayy",
sclass : "VI",
rollno : 12 
};

for (var property in student) {
  string = string + property + ",";
}

console.log(string);

</script>
</head>
</html>

// Q - 2: Write a JavaScript program to delete the rollno property from the following object. Also print the object before or after deleting the property.

<html>
<head>
	<meta charset="utf-8">
<script>
var string = "";
var student = {
name : "David Rayy",
sclass : "VI",
rollno : 12 
};

for (var property in student) {
  string = string + property + "\n";
}
console.log("Before deleting roll no property: ");
console.log(string);

delete student.rollno;

string = "";
for (var property in student) {
  string = string + property + "\n";
}
console.log("After deleting roll no property: ");
console.log(string);

</script>
</head>
</html>

// Q - 3 : Write a JavaScript program to get the length of an JavaScript object.

<html>
<head>
	<meta charset="utf-8">
<script>
var student = {
name : "David Rayy",
sclass : "VI",
rollno : 12 
};
var count = 0;
for(var i in student) {
	count++;
} 
console.log(count);
</script>
</head>
</html>

// Q - 4 : Write a JavaScript program to display the reading status (i.e. display book name, author name and reading status) of the following books.

<html>
<head>
	<meta charset="utf-8">
<script>
var library = [ 
   {
       author: 'Bill Gates',
       title: 'The Road Ahead',
       readingStatus: true
   },
   {
       author: 'Steve Jobs',
       title: 'Walter Isaacson',
       readingStatus: true
   },
   {
       author: 'Suzanne Collins',
       title:  'Mockingjay: The Final Book of The Hunger Games', 
       readingStatus: false
   }];

for(var i in library) {
	if(library[i].readingStatus) {
		console.log("You have read " + library[i].title + " by " + library[i].author);
	}
	else {
		console.log("You have not read " + library[i].title + " by " + library[i].author);
	}
}
</script>
</head>
</html>

// Q - 5 : Write a JavaScript program to get the volume of a Cylinder with four decimal places using object classes

<html>
<head>
	<meta charset="utf-8">
<script>
function Cylinder(ht, radius) {
  this.ht = ht;
  this.radius = radius;
}
Cylinder.prototype.volumeOfCylinder = function () {
  return this.ht * Math.PI * this.radius * this.radius;
};
var cyl = new Cylinder(2, 3);
console.log("volume: ", cyl.volumeOfCylinder().toFixed(4));
</script>
</head>
</html>

// Q - 6 : Write a Bubble Sort algorithm in JavaScript.

<html>
<head>
<meta charset="utf-8">
<script>	
function Sort(arr) {
	this.arr = arr;
}
Sort.prototype.bubbleSort = function() {
	var temp;
	var n = this.arr.length;
	for(var i = 0; i < n; i++) {
        for(var j = 0; j < n-i-1; j++) {
            if( this.arr[j] > this.arr[j+1]) {
                temp = this.arr[j];
                this.arr[j] = this.arr[j+1];
                this.arr[j+1] = temp;
            } 
        }
    }
	return this.arr;
}
var sortArr = new Sort([6,4,0,3,-2,1]);
console.log(sortArr.bubbleSort());
</script>
</head>
</html>

// Q - 7 : Write a JavaScript program which returns a subset of a string.

<html>
<head>
<meta charset="utf-8">
<script>	
String.prototype.subString = function() {
  var subset = [];
  for (var i = 0; i < this.length; i++) {
    for (var j = i+1; j<this.length+1; j++) {
      subset.push(this.slice(i,j));
    }
  }
  return subset;
};

console.log("dog".subString());
</script>
</head>
</html>

// Q - 8 : Write a JavaScript program to create a Clock.

function my_Clock() 
  {
  this.cur_date = new Date();
  this.hours = this.cur_date.getHours();
  this.minutes = this.cur_date.getMinutes();
  this.seconds = this.cur_date.getSeconds();
  }
my_Clock.prototype.run = function ()
  {
  setInterval(this.update.bind(this), 1000);
  };
my_Clock.prototype.update = function () 
  {
  this.updateTime(1);
  console.log(this.hours + ":" + this.minutes + ":" + this.seconds);
  };
my_Clock.prototype.updateTime = function (secs) 
  {
  this.seconds+= secs;
 if (this.seconds >= 60)
  {
  this.minutes++;
  this.seconds= 0;
  }
 if (this.minutes >= 60)
  {
  this.hours++;
  this.minutes=0;
  }
if (this.hours >= 24)
  {
  this.hours = 0;
  }
};
var clock = new my_Clock();
  clock.run();

// Q - 9 : Write a JavaScript program to calculate the area and perimeter of a circle. 

function Cal(rad) {
  this.rad = rad;
}
Cal.prototype.area = function() {
  return Math.PI * this.rad * this.rad;
}
Cal.prototype.perimeter = function() {
  return 2 * Math.PI * this.rad;
}
var c = new Cal(4);
console.log("Area: " + c.area().toFixed(4));
console.log("Perimeter: " + c.perimeter().toFixed(4));

// Q - 11 : Write a JavaScript function to print all the methods in an JavaScript object.

function allProperties(obj) 
{
 return Object.getOwnPropertyNames(obj);
}

console.log(allProperties(Array));

// Q - 13 : Write a JavaScript function to retrieve all the names of object's own and inherited properties. 

function Student(name) {
  this.name = name;
}
Student.prototype.regno = true;
function allKeys(obj) {
  if(!isObj(obj)) {
    return [];
  }
  var keys = [];
  for(var key in obj) {
    keys.push(key);
  }
  return keys;
}
function isObj(obj) {
  var type = typeof obj;
  return type;
}
console.log(allKeys(new Student("me")));

// Q - 14 : Write a JavaScript function to retrieve all the values of an object's properties.

function all_values(obj) {
    var keys = _keys(obj);
    var length = keys.length;
    var values = [];
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  }
function _keys(obj) 
 {
    var keys = [];
    for (var key in obj) {
      keys.push(key);
    } 
    return keys;
  }
function isObject(obj)   
{  
    var type = typeof obj;  
    return type;  
  } 
console.log(all_values({red: "#FF0000", green: "#00FF00", white: "#FFFFFF"}));

// Q - 15 : Write a JavaScript function to convert an object into a list of `[key, value]` pairs. 

function key_value_pairs(obj) 
   {
    var keys = _keys(obj);
    var length = keys.length;
    var pairs = [];
    for (var i = 0; i < length; i++) 
    {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  }
function _keys(obj) 
 {
    var keys = [];
    for (var key in obj) {
      keys.push(key);
    } 
    return keys;
  }
function isObject(obj)   
{  
    var type = typeof obj;  
    return type;  
  } 
console.log(key_value_pairs({red: "#FF0000", green: "#00FF00", white: "#FFFFFF"}));

// Q - 16 : Write a JavaScript function to get a copy of the object where the keys have become the values and the values the keys.

function invert_key_value(obj) {
    var result = {};
    var keys = _keys(obj);
    length = keys.length;
    for (var i = 0; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  }
function _keys(obj) 
 {
    var keys = [];
    for (var key in obj) {
      keys.push(key);
    } 
    return keys;
  }
function isObject(obj)   
{  
    var type = typeof obj;  
    return type;  
  } 
console.log(invert_key_value({red: "#FF0000", green: "#00FF00", white: "#FFFFFF"}));

// Q - 17 : Write a JavaScript function to check if an object contains given property.

function hasKey(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  }
console.log(hasKey({red: "#FF0000", green: "#00FF00", white: "#FFFFFF"}, "green"));